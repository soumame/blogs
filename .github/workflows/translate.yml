name: Auto Translate to English

on:
  push:
    branches:
      - main
    paths:
      - "**.md"
      - "!en/**"
      - "!_*.md"
      - "!README.md"
  workflow_dispatch:
    inputs:
      translate_all:
        description: 'Translate all untranslated files (ignore recent changes)'
        required: false
        type: boolean
        default: false

permissions:
  contents: write
  pull-requests: write

jobs:
  translate:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 2

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: "20"

      - name: Get files to translate
        id: changed-files
        run: |
          # Check if this is a manual run with translate_all option
          if [[ "${{ github.event_name }}" == "workflow_dispatch" ]] && [[ "${{ github.event.inputs.translate_all }}" == "true" ]]; then
            echo "Manual run: Translating all untranslated files"
            
            # Find all markdown files that don't have a translation yet
            all_md_files=$(find . -name "*.md" -type f | sed 's|^\./||' | grep -v '^en/' | grep -v '^_' | grep -v '^README.md' | grep -v '^\.')
            
            files_to_translate=""
            for file in $all_md_files; do
              # Check if translation exists in en/ folder
              if [ ! -f "en/$file" ]; then
                files_to_translate="$files_to_translate$file"$'\n'
              fi
            done
          else
            # Normal mode: translate changed files and untranslated files
            
            # Get list of changed markdown files from the commit (only for push events)
            if [[ "${{ github.event_name }}" == "push" ]]; then
              changed_files=$(git diff --name-only HEAD^ HEAD | grep -E '\.md$' | grep -v '^en/' | grep -v '^_' | grep -v '^README.md' || true)
            else
              # For manual dispatch without translate_all, only process untranslated files
              changed_files=""
            fi
            
            # Also find all markdown files that don't have a translation yet
            all_md_files=$(find . -name "*.md" -type f | sed 's|^\./||' | grep -v '^en/' | grep -v '^_' | grep -v '^README.md' | grep -v '^\.')
            
            # Combine and deduplicate files to translate
            files_to_translate=""
            
            # Check each markdown file
            for file in $all_md_files; do
              # Check if translation exists in en/ folder
              if [ ! -f "en/$file" ]; then
                files_to_translate="$files_to_translate$file"$'\n'
              elif [ -n "$changed_files" ] && echo "$changed_files" | grep -q "^$file$"; then
                # File was changed in this commit
                files_to_translate="$files_to_translate$file"$'\n'
              fi
            done
          fi
          
          # Remove trailing newline and duplicates
          files_to_translate=$(echo "$files_to_translate" | sed '/^$/d' | sort -u)
          
          if [ -z "$files_to_translate" ]; then
            echo "No files to translate"
            echo "files=" >> $GITHUB_OUTPUT
          else
            # Convert to JSON array format
            files_json=$(echo "$files_to_translate" | jq -R -s -c 'split("\n") | map(select(length > 0))')
            echo "files=$files_json" >> $GITHUB_OUTPUT
            echo "Files to translate: $files_json"
          fi

      - name: Translate files
        if: steps.changed-files.outputs.files != ''
        env:
          ANTHROPIC_API_KEY: ${{ secrets.ANTHROPIC_API_KEY }}
        run: |
          # Parse JSON array of files
          files='${{ steps.changed-files.outputs.files }}'
          
          # Track if any translation fails
          failed=false
          touch /tmp/failed_files.txt

          # Create en directory structure
          echo "$files" | jq -r '.[]' | while read -r file; do
            # Get directory path
            dir=$(dirname "$file")
            
            # Create corresponding directory in en folder
            if [ "$dir" != "." ]; then
              mkdir -p "en/$dir"
            else
              mkdir -p en
            fi
            
            # Read the original file content
            content=$(cat "$file")
            
            # Prepare the translation request
            request_body=$(jq -n \
              --arg content "$content" \
              --arg file "$file" \
              '{
                model: "claude-3-5-sonnet-20241022",
                max_tokens: 8000,
                messages: [
                  {
                    role: "user",
                    content: "Translate the following Japanese markdown file to English. Rules:\n1. Output ONLY the translated markdown content\n2. Do NOT add any explanations, notes, or wrapper text\n3. Preserve ALL markdown formatting including frontmatter\n4. Keep code blocks unchanged\n5. Translate Japanese text to natural English\n6. Start directly with the frontmatter or content - no preamble\n\n\($content)"
                  }
                ],
                temperature: 0.2
              }')
            
            # Call Claude API with error handling
            response=$(curl -s -w "\nHTTP_STATUS:%{http_code}" -X POST https://api.anthropic.com/v1/messages \
              -H "Content-Type: application/json" \
              -H "x-api-key: $ANTHROPIC_API_KEY" \
              -H "anthropic-version: 2023-06-01" \
              -d "$request_body")
            
            # Extract HTTP status code
            http_status=$(echo "$response" | tail -n 1 | sed 's/HTTP_STATUS://')
            response_body=$(echo "$response" | sed '$d')
            
            # Check for API errors
            if [ "$http_status" != "200" ]; then
              echo "❌ API Error for $file (HTTP $http_status)"
              echo "Response: $response_body"
              echo "$file" >> /tmp/failed_files.txt
              continue
            fi
            
            # Check for error in response
            error_type=$(echo "$response_body" | jq -r '.error.type // empty')
            if [ -n "$error_type" ]; then
              echo "❌ Translation error for $file: $error_type"
              error_message=$(echo "$response_body" | jq -r '.error.message // "Unknown error"')
              echo "Error message: $error_message"
              echo "$file" >> /tmp/failed_files.txt
              continue
            fi
            
            # Extract translated content
            translated=$(echo "$response_body" | jq -r '.content[0].text // empty')
            
            if [ -n "$translated" ]; then
              # Save translated file
              echo "$translated" > "en/$file"
              echo "✅ Translated: $file -> en/$file"
            else
              echo "❌ Failed to extract translation for: $file"
              echo "Response: $response_body"
              echo "$file" >> /tmp/failed_files.txt
            fi
          done
          
          # Check if any translations failed
          if [ -s /tmp/failed_files.txt ]; then
            echo "::error::Translation failed for the following files:"
            cat /tmp/failed_files.txt
            exit 1
          fi

      - name: Check for changes
        id: check-changes
        run: |
          if [ -n "$(git status --porcelain en/)" ]; then
            echo "has_changes=true" >> $GITHUB_OUTPUT
          else
            echo "has_changes=false" >> $GITHUB_OUTPUT
          fi

      - name: Create Pull Request
        if: steps.check-changes.outputs.has_changes == 'true'
        uses: peter-evans/create-pull-request@v5
        with:
          token: ${{ secrets.GITHUB_TOKEN }}
          commit-message: "🌐 Auto-translate Japanese articles to English"
          title: "🌐 [Auto] Translate Japanese articles to English"
          body: |
            ## 📝 Translation Summary

            This PR contains automated English translations of recently added or modified Japanese articles.

            ### 📋 Translated Files
            ${{ steps.changed-files.outputs.files }}

            ### ⚙️ Translation Details
            - **Translation Model**: Claude 3.5 Sonnet
            - **Triggered by**: Push to main branch
            - **Timestamp**: ${{ github.event.head_commit.timestamp }}

            ---
            *This PR was automatically generated by the translation workflow.*
          branch: auto-translate-${{ github.run_number }}
          delete-branch: true
